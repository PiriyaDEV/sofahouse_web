import React, { useState, useEffect, useRef } from 'react';
import { useSelector } from 'react-redux';

import { Swiper, SwiperSlide } from 'swiper/react';
import SwiperCore, {
  Autoplay,
  Navigation,
  Pagination,
  Controller,
  Thumbs,
} from 'swiper';
import ReactPlayer from 'react-player';
import Duration from '../function/Duration';
import 'swiper/swiper-bundle.css';

import '../../assets/css/text.css';
import '../../assets/css/page.css';
import '../../assets/css/page/portfolio.css';
import '../../assets/css/page/home.css';

// Img
import vinylMc from '../../assets/images/vinyl-mc.png';
import vinylPlay from '../../assets/images/vinyl-play.png';
import vinylDisc from '../../assets/images/vinyl-disc.png';
import headset from '../../assets/images/vinyl-hp.png';
import portPlay from '../../assets/images/port-play.png';
import stop from '../../assets/images/port-stop.png';

// import screenWidth from "../../assets/css/page/screen"

SwiperCore.use([Navigation, Pagination, Controller, Thumbs, Autoplay]);

export default function Portfolio() {
  const musicList = useSelector((state) => state.music.musics);
  const [swiperRef, setSwiperRef] = useState(null);
  const [category, setCategory] = useState('Lyrics/Song Writing');
  const [musicCategory, setMusicCategory] = useState([]);
  const [play, setPlay] = useState(false);
  const [played, setPlayed] = useState(0);
  const [seeking, setSeeking] = useState(false);
  const [duration, setDuration] = useState(0);
  const inputRange = useRef(null);
  const inputRange2 = useRef(null);
  const [musicListSelect, setMusicListSelect] = useState([
    {
      id: 0,
      title: 'Title',
      artist: 'Artist',
      duration: 0,
      music_url: '',
      cover_url: '',
      cat_lyrics_song: false,
      cat_music_prod: false,
      cat_vocal_rec: false,
      cat_music_score: false,
      cat_mix_master: false,
      show_homepage: false,
      created_at: 0,
    },
  ]);
  const [musicSelect, setMusicSelect] = useState({
    id: 0,
    title: 'Title',
    artist: 'Artist',
    duration: 0,
    music_url: '',
    cover_url: '',
    cat_lyrics_song: false,
    cat_music_prod: false,
    cat_vocal_rec: false,
    cat_music_score: false,
    cat_mix_master: false,
    show_homepage: false,
    created_at: 0,
  });

  const music = [];

  const categorySelect = (categoryName) => {
    setCategory(categoryName);
    if (categoryName === 'Lyrics/Song Writing') {
      setMusicCategory(
        musicList.filter((musicsList) => musicsList.cat_lyrics_song)
      );
    } else if (categoryName === 'Music Production') {
      setMusicCategory(
        musicList.filter((musicsList) => musicsList.cat_music_prod)
      );
    } else if (categoryName === 'Vocal Recording') {
      setMusicCategory(
        musicList.filter((musicsList) => musicsList.cat_vocal_rec)
      );
    } else if (categoryName === 'Music Score') {
      setMusicCategory(
        musicList.filter((musicsList) => musicsList.cat_music_score)
      );
    } else {
      setMusicCategory(
        musicList.filter((musicsList) => musicsList.cat_mix_master)
      );
    }

    swiperRef.slideTo(2, 0);
  };

  const checkCategory = (categoryName) => {
    let active = 'sm-text grey-text work-active';
    let inactive = 'sm-text grey-text';
    if (category === categoryName) {
      return active;
    } else {
      return inactive;
    }
  };

  useEffect(() => {
    setMusicCategory(
      musicList.filter((musicsList) => musicsList.cat_lyrics_song)
    );
    setMusicSelect(musicList[0]);
  }, [musicList]);

  useEffect(() => {
    if (musicCategory) {
      const musicList = [];
      let count = 5;
      if (musicCategory.length < 5) {
        count = musicCategory.length;
      }
      for (let i = 0; i < count; i++) {
        musicList.push(musicCategory[i]);
      }
      setMusicListSelect(musicList);
    }
  }, [musicCategory]);

  const picFromGGDrive = (link) => {
    let ggsrc = link.split('/');
    return 'https://drive.google.com/uc?export=view&id=' + ggsrc[5];
  };

  for (let i = 0; i < musicCategory.length; i += 1) {
    music.push(
      <SwiperSlide key={`slide-${i}`} tag='li'>
        <div className='carousal-music'>
          <img src={picFromGGDrive(musicCategory[i].cover_url)} alt='' />
          {musicCategory ? (
            <p className='xm2-text truncate'>{musicCategory[i].title}</p>
          ) : (
            <p className='xm2-text truncate'>Title</p>
          )}
          {musicCategory ? (
            <p className='xm2-text avn-medium grey-text truncate'>
              {musicCategory[i].artist}
            </p>
          ) : (
            <p className='xm2-text avn-medium grey-text truncate'>Artist</p>
          )}
        </div>
      </SwiperSlide>
    );
  }

  const Testimonial = [
    {
      name: 'Mayyanee Techaumporn (Mim)',
      picture:
        'https://drive.google.com/file/d/1GnIlGJoXlIEdBYlIYX236Ezb00RaUqa3/view?usp=sharing',
      review:
        '‡∏Ñ‡∏∏‡∏¢‡∏á‡πà‡∏≤‡∏¢ ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏î‡∏µ ‡∏™‡πà‡∏á‡∏ï‡∏£‡∏á‡πÄ‡∏ß‡∏•‡∏≤ ‡∏£‡∏≤‡∏Ñ‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏°‡∏¥‡∏ï‡∏£‡∏°‡∏≤‡∏Å‡∏Ñ‡πà‡∏∞ ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡πÇ‡∏≠‡∏Å‡∏≤‡∏™‡∏´‡∏ß‡∏±‡∏á‡∏ß‡πà‡∏≤‡∏à‡∏∞‡πÑ‡∏î‡πâ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏î‡πâ‡∏ß‡∏¢‡∏Å‡∏±‡∏ô‡∏≠‡∏µ‡∏Å‡∏ô‡∏∞‡∏Ñ‡∏∞ ü•∫',
    },
    {
      name: 'Pocketdog Production',
      picture:
        'https://drive.google.com/file/d/1voF6u6b0H5WZqwzf-4n-KptOME-Stwes/view?usp=sharing',
      review:
        '‡πÄ‡∏û‡∏•‡∏á Night Stroll ‡∏ô‡∏±‡πâ‡∏ô‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏û‡∏•‡∏á‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô Theme ‡∏´‡∏•‡∏±‡∏Å‡∏Ç‡∏≠‡∏á 00:00 Caf√© ‡∏ó‡∏µ‡πà‡∏Å‡∏•‡πà‡∏≤‡∏ß‡∏ñ‡∏∂‡∏á‡∏£‡πâ‡∏≤‡∏ô‡∏Å‡∏≤‡πÅ‡∏ü‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡∏¥‡∏î‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡πÉ‡∏ô‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏ó‡∏µ‡πà‡∏¢‡∏á‡∏Ñ‡∏∑‡∏ô‡∏à‡∏ô‡∏ñ‡∏∂‡∏á‡∏û‡∏£‡∏∞‡∏≠‡∏≤‡∏ó‡∏¥‡∏ï‡∏¢‡πå‡∏Ç‡∏∂‡πâ‡∏ô ‡πÇ‡∏î‡∏¢‡πÄ‡∏û‡∏•‡∏á‡∏î‡∏±‡∏á‡∏Å‡∏•‡πà‡∏≤‡∏ß ‡∏≠‡∏¢‡∏≤‡∏Å‡∏à‡∏∞‡∏ô‡∏≥‡πÄ‡∏™‡∏ô‡∏≠‡∏ñ‡∏∂‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡∏≠‡∏ö‡∏≠‡∏∏‡πà‡∏ô‡πÉ‡∏ô‡∏£‡πâ‡∏≤‡∏ô‡∏Ñ‡∏≤‡πÄ‡∏ü‡πà‡πÄ‡∏•‡πá‡∏Å ‡πÜ ‡∏ó‡πà‡∏≤‡∏°‡∏Å‡∏•‡∏≤‡∏á‡πÄ‡∏°‡∏∑‡∏≠‡∏á‡πÉ‡∏´‡∏ç‡πà‡∏ó‡∏µ‡πà‡πÅ‡∏™‡∏ô‡πÄ‡∏´‡∏ô‡πá‡∏ö‡∏´‡∏ô‡∏≤‡∏ß ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏Ç‡πâ‡∏≤‡∏°‡∏≤‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°‡∏ú‡∏•‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ‡∏ó‡∏µ‡πà ‡∏ä‡πà‡∏≠‡∏á 00:00 Caf√© Official',
    },
    {
      name: '‡∏ö‡∏∏‡∏ç‡∏£‡∏±‡∏Å‡∏©‡∏≤ ‡∏™‡∏≤‡πÅ‡∏™‡∏á (‡∏ä‡∏°‡∏û‡∏π)',
      picture:
        'https://drive.google.com/file/d/1MBg-lclldGxolJNmQEB1EdGyc4HG8s2d/view?usp=sharing',
      review:
        'Sofa house ‡πÄ‡∏õ‡πá‡∏ô‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏Ñ‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏î‡∏≤‡πÉ‡∏à‡πÄ‡∏Å‡πà‡∏á‡∏°‡∏≤‡∏Å‡∏Æ‡∏∞ ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏•‡∏±‡∏ß‡∏ñ‡πâ‡∏≤‡∏†‡∏≤‡∏û‡πÑ‡∏°‡πà‡∏ä‡∏±‡∏î‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏Ç‡∏¥‡∏ô‡πÜ ‡πÄ‡∏ß‡∏•‡∏≤‡∏ö‡∏£‡∏µ‡∏ü ‡∏•‡∏≠‡∏á‡∏û‡∏π‡∏î‡∏™‡∏¥‡πà‡∏á‡∏ó‡∏µ‡πà‡∏£‡∏π‡πâ‡∏™‡∏∂‡∏Å‡∏°‡∏≤‡∏Å‡πà‡∏≠‡∏ô ‡πÄ‡∏ú‡∏∑‡πà‡∏≠‡∏ô‡πâ‡∏≠‡∏á‡πÜ ‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏£‡∏≤‡πÑ‡∏î‡πâ ü§£ ‡∏à‡∏£‡∏¥‡∏á‡πÜ ‡∏ï‡∏≠‡∏ô‡∏ó‡∏≥‡πÄ‡∏£‡∏≤‡πÅ‡∏Ñ‡πà‡∏™‡πà‡∏á ref. ‡∏Å‡∏±‡∏ö‡∏î‡∏£‡∏≤‡∏ü‡∏ï‡πå‡∏´‡∏ô‡∏±‡∏á‡∏Ñ‡∏£‡πà‡∏≤‡∏ß‡πÜ ‡πÅ‡∏•‡πâ‡∏ß‡πÉ‡∏´‡πâ sofa house ‡∏ä‡πà‡∏ß‡∏¢‡∏Ñ‡∏¥‡∏î‡πÉ‡∏´‡πâ‡∏´‡∏°‡∏î‡πÄ‡∏•‡∏¢ ‡∏ñ‡∏π‡∏Å‡πÉ‡∏à‡∏°‡∏≤‡∏Å‡πÅ‡∏•‡∏∞‡∏£‡∏π‡πâ‡∏™‡∏∂‡∏Å‡∏Ç‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì‡∏°‡∏≤‡∏Å‡πÜ ‡∏Æ‡∏∞',
    },
    {
      name: '‡∏û‡∏£‡∏£‡∏Ñ‡πÉ‡∏™‡πà‡πÉ‡∏à',
      picture:
        'https://drive.google.com/file/d/1YEKIi_17xiDx_1NyHoGU8tR0-XgATT-o/view?usp=sharing',
      review:
        '‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏û‡∏•‡∏á‡∏ó‡∏µ‡πà‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏ô‡πÉ‡∏ô‡∏ó‡∏µ‡∏°‡∏ä‡∏≠‡∏ö‡∏°‡∏≤‡∏Å ‡∏ü‡∏±‡∏á‡πÅ‡∏•‡πâ‡∏ß‡∏ï‡∏¥‡∏î‡∏´‡∏π ‡πÅ‡∏•‡πâ‡∏ß‡∏Å‡πá‡∏™‡∏∑‡πà‡∏≠‡∏ñ‡∏∂‡∏á‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏£‡∏≤‡∏ß‡∏Ç‡∏≠‡∏á‡∏û‡∏ß‡∏Å‡πÄ‡∏£‡∏≤‡πÑ‡∏î‡πâ‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô‡πÄ‡∏•‡∏¢ ‡∏Å‡∏≤‡∏£‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡∏õ‡∏£‡∏∞‡∏™‡∏≤‡∏ô‡∏á‡∏≤‡∏ô ‡∏´‡∏£‡∏∑‡∏≠‡∏Å‡∏≤‡∏£‡∏û‡∏π‡∏î‡∏Ñ‡∏∏‡∏¢‡∏Ñ‡∏∑‡∏≠‡∏á‡πà‡∏≤‡∏¢‡∏°‡∏≤‡∏Å ‡πÄ‡∏õ‡πá‡∏ô‡∏Å‡∏±‡∏ô‡πÄ‡∏≠‡∏á ‡∏ó‡∏≤‡∏á‡∏ú‡∏π‡πâ‡∏ó‡∏≥‡∏Å‡πá‡∏õ‡∏£‡∏±‡∏ö‡πÅ‡∏Å‡πâ‡πÑ‡∏î‡πâ‡∏ï‡∏≤‡∏°‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏≤‡∏Ç‡∏≠‡∏ó‡∏∏‡∏Å‡∏≠‡∏¢‡πà‡∏≤‡∏á ‡πÅ‡∏•‡πâ‡∏ß‡∏Å‡πá‡∏ä‡πà‡∏ß‡∏¢‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏î‡∏µ‡∏°‡∏≤‡∏Å‡∏Å',
    },
    {
      name: 'Tinsrd',
      picture:
        'https://drive.google.com/file/d/1bWV2J17re6Ja3uL1Rt3iIH7VCvHX6uLi/view?usp=sharing',
      review:
        '‡∏Ç‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì Sofa House ‡∏°‡∏≤‡∏Å‡πÜ ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÉ‡∏´‡πâ‡∏Ñ‡∏≥‡∏õ‡∏£‡∏∂‡∏Å‡∏©‡∏≤‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏î‡∏ô‡∏ï‡∏£‡∏µ‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡πÄ‡∏û‡∏•‡∏á ‡∏õ‡∏£‡∏∞‡∏ó‡∏±‡∏ö‡πÉ‡∏à‡∏ó‡∏µ‡∏°‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏Ñ‡∏≠‡∏¢‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏ï‡∏±‡πâ‡∏á‡πÅ‡∏ï‡πà‡∏ï‡πâ‡∏ô‡∏à‡∏ô‡∏à‡∏ö‡∏ú‡∏•‡∏á‡∏≤‡∏ô‡πÄ‡∏•‡∏¢',
    },
    {
      name: 'Dean Chumpoon',
      picture:
        'https://drive.google.com/file/d/1dbRAXmGubqKb6KPwFd6SAtvzGP0m3ka7/view?usp=sharing',
      review:
        'For me, Sofahouse perfectly captures the artist(myself)‚Äôs personality. I had the privilege of working with their producers numerous times and it‚Äôs safe to say they know exactly what I want. Another thing worth mentioning is that, I really love the fact that I can edit as many times as I want. Sometimes, It takes a long time for the mix to be perfect and I want to thank this company for being extremely patient with me. ',
    },
    {
      name: '‡πÄ‡∏ô‡∏¢',
      picture:
        'https://drive.google.com/file/d/1UDoRj-uxJCuNfJOBOeLv7zu6jlHIZP90/view?usp=sharing',
      review:
        '‡πÄ‡∏õ‡πá‡∏ô‡∏™‡∏ï‡∏π‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô‡∏Å‡∏±‡∏ô‡πÄ‡∏≠‡∏á‡∏°‡∏≤‡∏Å ‡πÑ‡∏°‡πà‡∏£‡∏π‡πâ‡∏ß‡πà‡∏≤‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ô‡∏Å‡∏±‡∏ô‡∏î‡πâ‡∏ß‡∏¢‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏õ‡∏•‡πà‡∏≤ ‡πÅ‡∏•‡πâ‡∏ß‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏£‡∏≤‡πÑ‡∏î‡πâ‡πÉ‡∏ä‡πâ‡∏™‡∏ï‡∏π‡∏Ñ‡∏∑‡∏≠‡∏ö‡∏≠‡∏Å‡πÄ‡∏•‡∏¢‡∏ß‡πà‡∏≤‡∏Ñ‡∏∏‡πâ‡∏°‡∏°‡∏≤‡∏Å ‡πÑ‡∏î‡πâ‡πÉ‡∏ä‡πâ‡πÄ‡∏ï‡πá‡∏°‡πÄ‡∏ß‡∏•‡∏≤ ‡∏ö‡∏≤‡∏á‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÄ‡∏Å‡∏¥‡∏ô‡πÄ‡∏ß‡∏•‡∏≤‡∏î‡πâ‡∏ß‡∏¢ ‡∏ó‡∏µ‡πà‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏ô‡πÉ‡∏ô‡πÇ‡∏ã‡∏ü‡∏≤‡πÄ‡∏Æ‡πâ‡∏≤‡∏™‡πå‡∏ó‡∏≥‡πÄ‡∏Å‡∏¥‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏°‡∏≤‡∏Å ‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏≠‡∏±‡∏î‡∏Å‡πá‡∏Ñ‡∏∑‡∏≠‡∏°‡∏µ‡πÉ‡∏´‡πâ‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥ ‡∏Ñ‡∏≠‡∏¢‡πÄ‡∏™‡∏ô‡∏≠‡∏™‡∏¥‡πà‡∏á‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏ó‡∏≥‡πÉ‡∏´‡πâ‡πÄ‡∏£‡∏≤‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ‡∏î‡∏µ‡∏Ç‡∏∂‡πâ‡∏ô ‡∏ó‡∏±‡πâ‡∏á‡πÜ‡∏ó‡∏µ‡πà‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏ô‡πÑ‡∏°‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡πâ‡∏≠‡∏á‡∏ó‡∏≥‡∏°‡∏±‡∏ô‡∏î‡πâ‡∏ß‡∏¢‡∏ã‡πâ‡∏≥',
    },
    {
      name: 'Kanchai',
      picture:
        'https://drive.google.com/file/d/133gkwIdF8LZbSh8Ifks384kOZWzJ7KpQ/view?usp=sharing',
      review:
        '‡∏´‡πâ‡∏≠‡∏á‡∏™‡∏ï‡∏π‡∏ö‡∏£‡∏£‡∏¢‡∏≤‡∏Å‡∏≤‡∏®‡πÄ‡∏õ‡πá‡∏ô‡∏Å‡∏±‡∏ô‡πÄ‡∏≠‡∏á‡∏î‡∏µ‡∏Ñ‡πà‡∏∞ ‡∏ó‡∏≥‡πÉ‡∏´‡πâ‡∏£‡∏π‡πâ‡∏™‡∏∂‡∏Å‡∏ú‡πà‡∏≠‡∏ô‡∏Ñ‡∏•‡∏≤‡∏¢ ‡πÑ‡∏°‡πà‡∏£‡∏π‡πâ‡∏™‡∏∂‡∏Å‡∏≠‡∏∂‡∏î‡∏≠‡∏±‡∏î‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏≥‡∏á‡∏≤‡∏ô ‡∏ñ‡∏∂‡∏á‡∏à‡∏∞‡∏ï‡∏±‡πâ‡∏á‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏ó‡∏µ‡πà‡∏ó‡∏µ‡πà‡∏°‡∏µ‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏£‡∏ö‡∏Å‡∏ß‡∏ô‡∏Ñ‡πà‡∏≠‡∏ô‡∏Ç‡πâ‡∏≤‡∏á‡∏°‡∏≤‡∏Å ‡πÅ‡∏ï‡πà‡∏û‡∏≠‡πÄ‡∏Ç‡πâ‡∏≤‡πÑ‡∏õ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏™‡∏ï‡∏π‡∏Ñ‡∏∑‡∏≠‡πÄ‡∏á‡∏µ‡∏¢‡∏ö‡∏Å‡∏£‡∏¥‡∏ö‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡πÄ‡∏•‡πá‡∏î‡∏•‡∏≠‡∏î‡πÄ‡∏Ç‡πâ‡∏≤‡∏°‡∏≤‡πÄ‡∏•‡∏¢‡∏Ñ‡πà‡∏∞ ‡∏ó‡∏≥‡πÉ‡∏´‡πâ‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÄ‡∏õ‡πá‡∏ô‡πÑ‡∏õ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏£‡∏≤‡∏ö‡∏£‡∏∑‡πà‡∏ô‡∏Ñ‡πà‡∏∞',
    },
  ];

  const person = [];
  for (let i = 0; i < Testimonial.length; i += 1) {
    person.push(
      <SwiperSlide key={`slide-${i}`} tag='li'>
        <div className='carousal-tmn'>
          <img src={picFromGGDrive(Testimonial[i].picture)} alt='' />
          <h1 className='xm2-text'>{Testimonial[i].name}</h1>
          <p className='xm2-text skv-medium grey-text'>
            {Testimonial[i].review}
          </p>
        </div>
      </SwiperSlide>
    );
  }

  const togglePlay = (index) => {
    if (musicListSelect[index].id === musicSelect.id) {
      setPlay(!play);
    } else {
      setPlayed(0);
      var tObj = document.getElementsByClassName('play-range');
      for (var i = 0; i < tObj.length; i++) {
        tObj[i].value = 0;
      }
      if (play) {
        setMusicSelect(musicListSelect[index]);
      } else {
        setMusicSelect(musicListSelect[index]);
        setPlay(!play);
      }
    }
  };

  const handleSeekMouseDown = (e) => {
    setSeeking(true);
  };

  const handleSeekChange = (e, index) => {
    setPlayed(parseFloat(e.target.value));
  };

  const handleSeekMouseUp = (e) => {
    setSeeking(false);
    inputRange.current.seekTo(parseFloat(e.target.value));
    inputRange2.current.seekTo(parseFloat(e.target.value));
  };

  const handleProgress = (state) => {
    if (!seeking) {
      setPlayed(state.played);
    }
  };

  const handleDuration = (duration) => {
    setDuration(duration);
  };

  const handleplay = () => {
    setPlay(true);
  };

  const handlepause = () => {
    setPlay(false);
  };

  const slideChange = (e) => {
    setPlay(false);
    setPlayed(0);
    var tObj = document.getElementsByClassName('play-range');
    for (var i = 0; i < tObj.length; i++) {
      tObj[i].value = 0;
    }
    if (musicCategory) {
      const musicList = [];

      let count = 0;

      if (musicCategory.length >= 5) {
        for (let i = e.realIndex - 2; i < musicCategory.length; i++) {
          if (count === 5) {
            break;
          } else {
            if (i < 0) {
              musicList.push(musicCategory[musicCategory.length + i]);
            } else {
              musicList.push(musicCategory[i]);
            }
            count++;
          }
        }
        if (count === 3) {
          musicList.push(musicCategory[0]);
          musicList.push(musicCategory[1]);
        } else if (count === 4) {
          musicList.push(musicCategory[0]);
        }
      }
      else {
        for (let i = 0; i < musicCategory.length; i++) {
          musicList.push(musicCategory[i]);
        }
      }
      setMusicSelect(musicList[0]);
      setMusicListSelect(musicList);
    }
  };

  return (
    <div id='portfolio' className='section'>
      <div className='page-container'>
        {/* Work Section */}
        <div id='work-section'>
          <div id='work-menu'>
            {musicList.filter((musicsList) => musicsList.cat_lyrics_song)
              .length >= 1 ? (
              <h1
                onClick={() => categorySelect('Lyrics/Song Writing')}
                className={checkCategory('Lyrics/Song Writing')}
              >
                Lyrics/ Song Writing
              </h1>
            ) : (
              <h1 className={checkCategory('Lyrics/Song Writing')}>
                Lyrics/ Song Writing
              </h1>
            )}

            {musicList.filter((musicsList) => musicsList.cat_music_prod)
              .length >= 1 ? (
              <h1
                onClick={() => categorySelect('Music Production')}
                className={checkCategory('Music Production')}
              >
                Music Production
              </h1>
            ) : (
              <h1 className={checkCategory('Music Production')}>
                Music Production
              </h1>
            )}

            {musicList.filter((musicsList) => musicsList.cat_vocal_rec)
              .length >= 1 ? (
              <h1
                onClick={() => categorySelect('Vocal Recording')}
                className={checkCategory('Vocal Recording')}
              >
                Vocal Recording
              </h1>
            ) : (
              <h1 className={checkCategory('Vocal Recording')}>
                Vocal Recording
              </h1>
            )}

            {musicList.filter((musicsList) => musicsList.cat_music_score)
              .length >= 1 ? (
              <h1
                onClick={() => categorySelect('Music Score')}
                className={checkCategory('Music Score')}
              >
                Music Score
              </h1>
            ) : (
              <h1 className={checkCategory('Music Score')}>Music Score</h1>
            )}

            {musicList.filter((musicsList) => musicsList.cat_mix_master)
              .length >= 1 ? (
              <h1
                onClick={() => categorySelect('Mixing/Mastering')}
                className={checkCategory('Mixing/Mastering')}
              >
                Mixing & Mastering
              </h1>
            ) : (
              <h1 className={checkCategory('Mixing/Mastering')}>
                Mixing & Mastering
              </h1>
            )}
          </div>
          <div className='section'>
            <div id='work-carousal' className='section'>
              <Swiper
                id='main'
                onSwiper={setSwiperRef}
                tag='section'
                wrapperTag='ul'
                navigation={{
                  prevEl: '.music-prev',
                  nextEl: '.music-next',
                }}
                slidesPerView={1}
                loop
                loopAdditionalSlides={100}
                centeredSlides={true}
                initialSlide={2}
                onSlideChange={slideChange}
                breakpoints={{
                  // when window width is >= 700px
                  700: {
                    slidesPerView: 5,
                  },
                  414: {
                    slidesPerView: 3,
                  },
                }}
              >
                {music}
              </Swiper>
              {music && music.length >= 5 ? (
                <div>
                  <div className='swiper-button-prev music-prev'></div>
                  <div className='swiper-button-next music-next'></div>
                </div>
              ) : (
                <div>
                  <div className='swiper-button-prev music-prev block-interact'></div>
                  <div className='swiper-button-next music-next block-interact'></div>
                </div>
              )}
            </div>
          </div>
        </div>

        {/* Play Section */}
        <div id='port-play-section'>
          <div id='vinyl-mb-container'>
            <div id='port-vinyl'>
              <div id='home-vinyl-section'>
                <img className='port-vinyl vinyl-play' src={vinylPlay} alt='' />
                {play ? (
                  <img
                    className='port-vinyl vinyl-disc rotate'
                    src={vinylDisc}
                    alt=''
                  />
                ) : (
                  <img
                    className='port-vinyl vinyl-disc'
                    src={vinylDisc}
                    alt=''
                  />
                )}
                <img className='port-vinyl headset' src={headset} alt='' />
                <img className='port-vinyl vinyl-mc' src={vinylMc} alt='' />
              </div>
              {musicSelect ? (
                <p className='xm-text truncate'>{musicSelect.title}</p>
              ) : (
                <h1 className='xm-text'>Title</h1>
              )}

              {musicSelect ? (
                <h1 className='xm2-text avn-medium grey-text truncate'>
                  {musicSelect.artist}
                </h1>
              ) : (
                <h1 className='xm2-text avn-medium grey-text'>Artist</h1>
              )}
            </div>
            <div id='port-play-text' className='play-text-mb'>
              {musicSelect && (
                <ReactPlayer
                  id='port-vdo-player'
                  playing={play}
                  volume={0.1}
                  // onProgress={handleProgress}
                  onPlay={handleplay}
                  onPause={handlepause}
                  // onDuration={handleDuration}
                  muted={true}
                  loop={true}
                  ref={inputRange2}
                  url={musicSelect.music_url}
                />
              )}
            </div>
          </div>

          <div id='port-play-text' className='section play-text-pc'>
            {musicSelect && (
              <ReactPlayer
                id='port-vdo-player'
                playing={play}
                volume={0.1}
                onProgress={handleProgress}
                onDuration={handleDuration}
                onPlay={handleplay}
                onPause={handlepause}
                loop={true}
                ref={inputRange}
                url={musicSelect.music_url}
              />
            )}
          </div>

          <div>
            {musicListSelect &&
              musicListSelect.map((music, index) => (
                <div className='port-play-box' key={index}>
                  {play === true && music.id === musicSelect.id ? (
                    <img
                      onClick={() => togglePlay(index)}
                      className='play-btn'
                      src={stop}
                      alt=''
                    />
                  ) : (
                    <img
                      onClick={() => togglePlay(index)}
                      className='play-btn'
                      src={portPlay}
                      alt=''
                    />
                  )}
                  <div>
                    {music ? (
                      <h1 className='xm-text port-truncate'>{music.title}</h1>
                    ) : (
                      <h1 className='xm-text'>Title</h1>
                    )}
                    {music ? (
                      <h1 className='xm2-text avn-medium grey-text port-truncate'>
                        {music.artist}
                      </h1>
                    ) : (
                      <h1 className='xm2-text avn-medium grey-text'>Artist</h1>
                    )}
                  </div>
                  <div className='port-range'>
                    <h1 className='xm-text avn-medium grey-text'>
                      {music && music.id === musicSelect.id ? (
                        <Duration seconds={duration * played} />
                      ) : (
                        '0:00'
                      )}
                    </h1>
                    {music && music.id === musicSelect.id ? (
                      <input
                        id='play-range'
                        className='play-range'
                        type='range'
                        min={0}
                        max={0.999999}
                        value={played}
                        // defaultValue={played}
                        onMouseDown={handleSeekMouseDown}
                        onChange={handleSeekChange}
                        onMouseUp={handleSeekMouseUp}
                        step='any'
                      />
                    ) : (
                      <input
                        id='play-range'
                        className='play-range'
                        type='range'
                        defaultValue={0}
                        min={0}
                        max={0}
                        step='any'
                      />
                    )}
                    {music ? (
                      <h1 className='xm-text avn-medium grey-text'>
                        <Duration seconds={music.duration} />
                      </h1>
                    ) : (
                      <h1 className='xm-text avn-medium grey-text'>
                        <Duration seconds={0} />
                      </h1>
                    )}
                  </div>
                  {/* {music && music.id === musicSelect.id && (
                    <ReactPlayer
                      playing={play}
                      volume={0.1}
                      width="0"
                      height="0"
                      onProgress={handleProgress}
                      onDuration={handleDuration}
                      loop={true}
                      ref={inputRange}
                      url={music.url}
                    />
                  )} */}
                </div>
              ))}
          </div>
        </div>

        {/* Testimonial Section */}
        <div id='tmn-section'>
          <h1 className='bg-text'>OUR TESTIMONIALS</h1>

          <div className='tmn-carousal-section'>
            <div id='tmn-carousal' className='section'>
              <Swiper
                id='main'
                tag='section'
                wrapperTag='ul'
                navigation={{
                  prevEl: '.person-prev',
                  nextEl: '.person-next',
                }}
                slidesPerView={1}
                spaceBetween={30}
                loop
                autoplay={{
                  delay: 3500,
                }}
                loopAdditionalSlides={100}
                breakpoints={{
                  // when window width is >= 700px
                  1200: {
                    slidesPerView: 4,
                  },
                  500: {
                    slidesPerView: 3,
                  },
                }}
              >
                {person}
              </Swiper>
              <div className='swiper-button-prev grey-pag person-prev'></div>
              <div className='swiper-button-next grey-pag person-next'></div>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
}
